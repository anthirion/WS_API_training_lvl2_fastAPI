---
# Play sur la db
- name: MySQL installation and configuration
  hosts: dbserver
  become: true
  # Les tags permettent de cibler un play ou une tâche dans le playbook
  # on peut exécuter les tâches ou le play taggé uniquement avec l'option --tags de ansible-playbook
  tags: mysql_config

  # Le role suivant installe et configure MySQL
  roles:
    - role: geerlingguy.mysql
      become: true

  vars_files:
    - geerlingguy.mysql/defaults/main.yml

  tasks:
    - name: Mettre à jour la liste des paquets apt
      ansible.builtin.apt:
        update_cache: true

    - name: Autoriser les connexions MySQL depuis n'importe quelle machine
      ansible.builtin.lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^bind-address\s*='
        line: 'bind-address = 0.0.0.0'
      notify: Restart MySQL

    - name: Copier le script de configuration de la DB
      ansible.builtin.copy:
        src: ../mysql-init/init.sql
        dest: ./init.sql
        # Rendre le script exécutable
        mode: "u+x,g=r,o=r"


    - name: Exécuter le script SQL pour initialiser la DB
      ansible.builtin.shell: |
        mysql -u {{ mysql_user_name }} -p{{ mysql_user_password }} < ./init.sql
    
  handlers:
  - name: Restart MySQL
    ansible.builtin.service:
      name: mysql
      state: restarted



# Play sur le serveur API
- name: API server configuration
  hosts: apiserver
  become: true
  tags: api_server_config
  vars:
    image_name: shopapi
    container_name: apiserver
    rebuild: false  # changer la valeur de la variable avec l'option --extra-vars

  tasks:
    - name: Copier les fichiers sources dans app
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /home/anthirion/app/
        mode: u=rw,g=r,o=r
      with_fileglob:
        - "../containerized_app/*.py"
      tags: code_updated

    - name: Copier les fichiers de configuration dans app
      ansible.builtin.copy:
          src:  "{{ item }}"
          dest: /home/anthirion/app/
          mode: u=rw,g=r,o=r
      with_items:
        - ../containerized_app/.env
        - ../containerized_app/Dockerfile
        - ../requirements.txt
      tags: code_updated

    - name: Mettre à jour l'adresse IP du serveur DB dans le .env
      ansible.builtin.lineinfile:
        path: /home/anthirion/app/.env
        regexp: '^HOST='
        line: "HOST={{ hostvars['db-server']['ansible_host'] }}"
      tags: code_updated
    
    - name: Arreter le conteneur qui s'exécute si rebuild est vrai
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: stopped
      when: rebuild | bool == true
      tags: code_updated

    - name: Supprimer l'image Docker si rebuild est vrai
      community.docker.docker_image:
        name: "{{ image_name }}"
        tag: latest
        state: absent
        # forcer la suppression de l'image
        force_absent: true
      when: rebuild | bool == true
      tags: code_updated

    - name: >
        Construire l'image Docker de l'API serveur à partir du Dockerfile
        Par défaut, si l'image existe déjà, elle n'est pas reconstruite
      community.docker.docker_image:
        name: "{{ image_name }}"
        tag: latest
        source: build
        build:
          path: /home/anthirion/app/
        state: present
      tags: code_updated

    - name: Démarrer un conteneur Docker à partir de l'image construite
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}:latest"
        state: started
        ports:
          # signification: port_hote:port_conteneur
          - "80:8000"
      tags: code_updated

## Pour voir les appels API effectués et leur réponse, afficher les logs:
## docker logs <container_name> (à taper dans la VM)


# Play sur la gateway
- name: Gateway configuration
  hosts: gatewayserver
  become: true
  tags: gateway_config
  vars:
    image_name: "custom_krakend"
    container_name: "api_gateway"
    rebuild: false  # changer la valeur de la variable avec l'option --extra-vars

  vars_files:
    - secrets.yml

  tasks:
    - name: Copier le Dockerfile du répertoire krakend sur le serveur distant
      ansible.builtin.copy:
        src: ./krakend/Dockerfile
        dest: /home/anthirion/krakend/
        mode: u=rw,g=r,o=rx

    - name: Générer le fichier krakend.json à partir du template
      ansible.builtin.template:
        src: ./krakend/krakend.json.j2
        dest: /home/anthirion/krakend/krakend.json

    - name: Remplacer localhost par l'adresse IP du serveur API dans krakend.json
      ansible.builtin.replace:
        path: /home/anthirion/krakend/krakend.json
        regexp: '"host":\s*\[\s*"http://127\.0\.0\.1"\s*\]'
        replace: '"host": ["http://{{ hostvars["api-server"]["ansible_host"] }}"]'

    - name: Arreter le conteneur qui s'exécute si rebuild est vrai
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: stopped
      when: rebuild | bool == true

    - name: Supprimer l'image Docker si rebuild est vrai
      community.docker.docker_image:
        name: "{{ image_name }}"
        tag: latest
        state: absent
        # forcer la suppression de l'image
        force_absent: true
      when: rebuild | bool == true

    - name: >
        Construire l'image Docker de la gateway à partir du Dockerfile
        Par défaut, si l'image existe déjà, elle n'est pas reconstruite
      community.docker.docker_image:
        name: "{{ image_name }}"
        tag: latest
        source: build
        build:
          path: /home/anthirion/krakend
        state: present

    - name: Démarrer un conteneur Docker à partir de l'image construite
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}:latest"
        state: started
        ports:
          # signification: port_hote:port_conteneur
          - "80:8080"    

## Pour voir les appels API effectués et leur réponse, afficher les logs:
## docker logs <container_name> (à taper dans la VM)

## [ATTENTION] Par défaut, KrakenD n'accepte que les objets json
## Si le backend renvoie un ARRAY de json, il faut le spécifier dans le fichier
## de configuration de KrakenD, par la ligne "is_collection = true"
